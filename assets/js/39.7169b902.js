(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{477:function(t,e,i){"use strict";i.r(e);var a=i(1),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),e("p",[t._v("This sequence of variables on the data sync path make the ipyaggrid easy to use, hopefully , and simpler to debug and understand.")]),t._v(" "),t._m(5),t._v(" "),e("p",[t._v("As a consequence, the 4 variables containing grid data are:")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),e("p",[t._v("In order to detect changes in variables synced across the Python-JavaScript border, ipywidgets use the library "),e("a",{attrs:{href:"https://github.com/ipython/traitlets",target:"_blank",rel:"noopener noreferrer"}},[t._v("traitlets"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("However in the case of a "),e("code",[t._v("dict")]),t._v(" or "),e("code",[t._v("list")]),t._v(" changing one key/value or element is not enough to trigger the sync, as explained in the "),e("a",{attrs:{href:"https://github.com/jupyter-widgets/ipywidgets/issues/786",target:"_blank",rel:"noopener noreferrer"}},[t._v("ipywidget issue 786"),e("OutboundLink")],1),t._v(". For this reason we have added the "),e("code",[t._v("_counter_update_data")]),t._v(" variable in the AgGridModel. Incrementing it enables to unambiguously signal the JavaScript code that it must perform some operation.")]),t._v(" "),t._m(8),t._v(" "),e("p",[t._v("However there is a bug in ipywidgets, explained in the "),e("a",{attrs:{href:"https://github.com/ipython/traitlets/issues/496",target:"_blank",rel:"noopener noreferrer"}},[t._v("trailets issue 496"),e("OutboundLink")],1),t._v(", that prevents syncing a "),e("code",[t._v("dict")]),t._v(" in some cases. The "),e("a",{attrs:{href:"https://github.com/ipython/traitlets/pull/466",target:"_blank",rel:"noopener noreferrer"}},[t._v("traitlets PR 466"),e("OutboundLink")],1),t._v(" should solve this problem. In the meantime we have added a "),e("code",[t._v("counter")]),t._v(" key/value in the "),e("code",[t._v("grid_data_out")]),t._v(" variable to always trigger the update. See file "),e("a",{attrs:{href:"https://gitlab.com/DGothrek/ipyaggrid/blob/master/ipyaggrid/grid.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("grid.py"),e("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),e("p",[t._v("In order to display a date in the same way irrespective of which time zone the user sits, we have created a Cell Renderer for dates that counter the changes performed automatically by the browser. See function "),e("code",[t._v("dateFormatter")]),t._v(" in "),e("a",{attrs:{href:"https://gitlab.com/DGothrek/ipyaggrid/blob/master/ipyaggrid/js/helpersBuiltin.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("helpersBuiltin.js"),e("OutboundLink")],1),t._v(".")])])}),[function(){var t=this._self._c;return t("h1",{attrs:{id:"structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[this._v("#")]),this._v(" Structure")])},function(){var t=this._self._c;return t("p",[this._v("This section contains a few "),t("strong",[this._v("ipyaggrid")]),this._v(" key architecture decisions and thier reasons.")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"in-down-up-out"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-down-up-out"}},[this._v("#")]),this._v(" In, Down, Up, Out")])},function(){var t=this._self._c;return t("p",[this._v("in an ipywidget, the data lives in Python and JavaScript and get synced between the two."),t("br"),this._v("\nTo make the data path clear we have added the following suffixes to data variables. Each corresponds to a step on the path:")])},function(){var t=this,e=t._self._c;return e("ul",[e("li",[e("code",[t._v("_in")]),t._v(": Python variable, data input by the Python user")]),t._v(" "),e("li",[e("code",[t._v("_down")]),t._v(": Python/JavaScript variable, synced down from Python to JavaScript when assigned")]),t._v(" "),e("li",[e("code",[t._v("_up")]),t._v(": Python/JavaScript variable, synced up from JavaScript to Python upon JavaScript event")]),t._v(" "),e("li",[e("code",[t._v("_out")]),t._v(": Python variable, data made available to the Python user, built from "),e("code",[t._v("_up")])])])},function(){var t=this._self._c;return t("p",[this._v("The variables naturally hidden to the Python user typically start with "),t("code",[this._v("_")]),this._v(", the others not.")])},function(){var t=this._self._c;return t("ul",[t("li",[t("code",[this._v("grid_data_in")])]),this._v(" "),t("li",[t("code",[this._v("_grid_data_down")])]),this._v(" "),t("li",[t("code",[this._v("_grid_data_up")])]),this._v(" "),t("li",[t("code",[this._v("grid_data_out")])])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"counters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#counters"}},[this._v("#")]),this._v(" Counters")])},function(){var t=this._self._c;return t("p",[this._v("More specifically, upon counter increment the Javascript starts delete/export operations based on other synced variables value. These operations ultimately update "),t("code",[this._v("_grid_data_up")]),this._v(" and then "),t("code",[this._v("grid_data_out")]),this._v(".")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"javascript-injection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-injection"}},[this._v("#")]),this._v(" JavaScript injection")])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("ipyaggrid")]),this._v(" approach is to wrap ag-Grid as transparently as possible in order to:")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("provide unlimited access to all ag-Grid features")]),this._v(" "),t("li",[this._v("avoid maintaining a Python-Javascript translation layer")])])},function(){var t=this._self._c;return t("p",[this._v("So a user can write javascript and pass it as a Python str to the "),t("code",[this._v("Grid")]),this._v(" constructor."),t("br"),this._v("\nThis code is parsed and eval-ed in the browser. Consequently a notebook with "),t("strong",[this._v("ipyaggrid")]),this._v(" may contain arbitrary Javascript code - like any website by the way. In order to mitigate the potential security issue we recommend to:")])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("Pay attention to the origin of the notebooks you run - to the same extent you visit potentially malicious websites")]),this._v(" "),t("li",[this._v("Get into the habit of running Jupyter in a Private mode")])])},function(){var t=this._self._c;return t("h2",{attrs:{id:"serializers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializers"}},[this._v("#")]),this._v(" Serializers")])},function(){var t=this._self._c;return t("p",[this._v("When working with the "),t("code",[this._v("DOMWidgetModel")]),this._v(", it is necessary to extend the serializers from\n"),t("code",[this._v("DOMWidgetModel.serializers")]),this._v(". Otherwise the layout, which needs a proper\nserializer, will not have it and you will probably get an error.")])},function(){var t=this._self._c;return t("p",[this._v("For compatibility with Python gzip, use "),t("code",[this._v("pako.gzip")]),this._v(", not "),t("code",[this._v("pako.deflate")]),this._v(".")])},function(){var t=this._self._c;return t("p",[this._v("A side benefit of serializing - gunzip - the ipywidget data is that all content with single/double quotes or backticks will be properly encapsulated and consequently will enable embedding in an HTML page. Without this 'trick' the JavaScript code passed as strings in the ipywidget variables will usually break a standalone HTML page containing an "),t("strong",[this._v("ipyaggrid")]),this._v(" state.")])},function(){var t=this._self._c;return t("h2",{attrs:{id:"time-zones"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-zones"}},[this._v("#")]),this._v(" Time Zones")])}],!1,null,null,null);e.default=r.exports}}]);